// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: api.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type JoinSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVersion uint32   `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	SessionId       []byte   `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UserPkHashes    [][]byte `protobuf:"bytes,3,rep,name=user_pk_hashes,json=userPkHashes,proto3" json:"user_pk_hashes,omitempty"`
}

func (x *JoinSessionRequest) Reset() {
	*x = JoinSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinSessionRequest) ProtoMessage() {}

func (x *JoinSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinSessionRequest.ProtoReflect.Descriptor instead.
func (*JoinSessionRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

func (x *JoinSessionRequest) GetProtocolVersion() uint32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *JoinSessionRequest) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *JoinSessionRequest) GetUserPkHashes() [][]byte {
	if x != nil {
		return x.UserPkHashes
	}
	return nil
}

type JoinSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken     []byte   `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	LockTime         uint32   `protobuf:"varint,2,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	InitialLockTime  uint32   `protobuf:"varint,3,opt,name=initial_lock_time,json=initialLockTime,proto3" json:"initial_lock_time,omitempty"`
	FundLockTime     uint32   `protobuf:"varint,4,opt,name=fund_lock_time,json=fundLockTime,proto3" json:"fund_lock_time,omitempty"`
	ChangeKey        []byte   `protobuf:"bytes,9,opt,name=change_key,json=changeKey,proto3" json:"change_key,omitempty"`
	TxFeeRate        int64    `protobuf:"varint,10,opt,name=tx_fee_rate,json=txFeeRate,proto3" json:"tx_fee_rate,omitempty"`
	LeafAmount       int64    `protobuf:"varint,11,opt,name=leaf_amount,json=leafAmount,proto3" json:"leaf_amount,omitempty"`
	UserPkHashes     [][]byte `protobuf:"bytes,5,rep,name=user_pk_hashes,json=userPkHashes,proto3" json:"user_pk_hashes,omitempty"`
	ProviderPkHashes [][]byte `protobuf:"bytes,7,rep,name=provider_pk_hashes,json=providerPkHashes,proto3" json:"provider_pk_hashes,omitempty"`
}

func (x *JoinSessionResponse) Reset() {
	*x = JoinSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinSessionResponse) ProtoMessage() {}

func (x *JoinSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinSessionResponse.ProtoReflect.Descriptor instead.
func (*JoinSessionResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

func (x *JoinSessionResponse) GetSessionToken() []byte {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

func (x *JoinSessionResponse) GetLockTime() uint32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *JoinSessionResponse) GetInitialLockTime() uint32 {
	if x != nil {
		return x.InitialLockTime
	}
	return 0
}

func (x *JoinSessionResponse) GetFundLockTime() uint32 {
	if x != nil {
		return x.FundLockTime
	}
	return 0
}

func (x *JoinSessionResponse) GetChangeKey() []byte {
	if x != nil {
		return x.ChangeKey
	}
	return nil
}

func (x *JoinSessionResponse) GetTxFeeRate() int64 {
	if x != nil {
		return x.TxFeeRate
	}
	return 0
}

func (x *JoinSessionResponse) GetLeafAmount() int64 {
	if x != nil {
		return x.LeafAmount
	}
	return 0
}

func (x *JoinSessionResponse) GetUserPkHashes() [][]byte {
	if x != nil {
		return x.UserPkHashes
	}
	return nil
}

func (x *JoinSessionResponse) GetProviderPkHashes() [][]byte {
	if x != nil {
		return x.ProviderPkHashes
	}
	return nil
}

type RevealLeafKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken []byte   `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	UserKeys     [][]byte `protobuf:"bytes,2,rep,name=user_keys,json=userKeys,proto3" json:"user_keys,omitempty"`
	UserIvs      [][]byte `protobuf:"bytes,10,rep,name=user_ivs,json=userIvs,proto3" json:"user_ivs,omitempty"`
}

func (x *RevealLeafKeysRequest) Reset() {
	*x = RevealLeafKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevealLeafKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevealLeafKeysRequest) ProtoMessage() {}

func (x *RevealLeafKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevealLeafKeysRequest.ProtoReflect.Descriptor instead.
func (*RevealLeafKeysRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

func (x *RevealLeafKeysRequest) GetSessionToken() []byte {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

func (x *RevealLeafKeysRequest) GetUserKeys() [][]byte {
	if x != nil {
		return x.UserKeys
	}
	return nil
}

func (x *RevealLeafKeysRequest) GetUserIvs() [][]byte {
	if x != nil {
		return x.UserIvs
	}
	return nil
}

type RevealLeafKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefundInputs        []*RevealLeafKeysResponseInput `protobuf:"bytes,1,rep,name=prefund_inputs,json=prefundInputs,proto3" json:"prefund_inputs,omitempty"`
	FundAdditionalInputs []*RevealLeafKeysResponseInput `protobuf:"bytes,2,rep,name=fund_additional_inputs,json=fundAdditionalInputs,proto3" json:"fund_additional_inputs,omitempty"`
	UserKeys             [][]byte                       `protobuf:"bytes,3,rep,name=user_keys,json=userKeys,proto3" json:"user_keys,omitempty"`
	UserIvs              [][]byte                       `protobuf:"bytes,6,rep,name=user_ivs,json=userIvs,proto3" json:"user_ivs,omitempty"`
	ProviderKeys         [][]byte                       `protobuf:"bytes,9,rep,name=provider_keys,json=providerKeys,proto3" json:"provider_keys,omitempty"`
	ProviderIvs          [][]byte                       `protobuf:"bytes,10,rep,name=provider_ivs,json=providerIvs,proto3" json:"provider_ivs,omitempty"`
}

func (x *RevealLeafKeysResponse) Reset() {
	*x = RevealLeafKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevealLeafKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevealLeafKeysResponse) ProtoMessage() {}

func (x *RevealLeafKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevealLeafKeysResponse.ProtoReflect.Descriptor instead.
func (*RevealLeafKeysResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

func (x *RevealLeafKeysResponse) GetPrefundInputs() []*RevealLeafKeysResponseInput {
	if x != nil {
		return x.PrefundInputs
	}
	return nil
}

func (x *RevealLeafKeysResponse) GetFundAdditionalInputs() []*RevealLeafKeysResponseInput {
	if x != nil {
		return x.FundAdditionalInputs
	}
	return nil
}

func (x *RevealLeafKeysResponse) GetUserKeys() [][]byte {
	if x != nil {
		return x.UserKeys
	}
	return nil
}

func (x *RevealLeafKeysResponse) GetUserIvs() [][]byte {
	if x != nil {
		return x.UserIvs
	}
	return nil
}

func (x *RevealLeafKeysResponse) GetProviderKeys() [][]byte {
	if x != nil {
		return x.ProviderKeys
	}
	return nil
}

func (x *RevealLeafKeysResponse) GetProviderIvs() [][]byte {
	if x != nil {
		return x.ProviderIvs
	}
	return nil
}

type ByteSlices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data [][]byte `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ByteSlices) Reset() {
	*x = ByteSlices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByteSlices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByteSlices) ProtoMessage() {}

func (x *ByteSlices) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByteSlices.ProtoReflect.Descriptor instead.
func (*ByteSlices) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

func (x *ByteSlices) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CommitToNoncesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken    []byte                 `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	TreeNonceHashes map[uint32]*ByteSlices `protobuf:"bytes,2,rep,name=tree_nonce_hashes,json=treeNonceHashes,proto3" json:"tree_nonce_hashes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FundNonceHashes [][]byte               `protobuf:"bytes,3,rep,name=fund_nonce_hashes,json=fundNonceHashes,proto3" json:"fund_nonce_hashes,omitempty"`
}

func (x *CommitToNoncesRequest) Reset() {
	*x = CommitToNoncesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitToNoncesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitToNoncesRequest) ProtoMessage() {}

func (x *CommitToNoncesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitToNoncesRequest.ProtoReflect.Descriptor instead.
func (*CommitToNoncesRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

func (x *CommitToNoncesRequest) GetSessionToken() []byte {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

func (x *CommitToNoncesRequest) GetTreeNonceHashes() map[uint32]*ByteSlices {
	if x != nil {
		return x.TreeNonceHashes
	}
	return nil
}

func (x *CommitToNoncesRequest) GetFundNonceHashes() [][]byte {
	if x != nil {
		return x.FundNonceHashes
	}
	return nil
}

type CommitToNoncesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeNonceHashes map[uint32]*ByteSlices `protobuf:"bytes,1,rep,name=tree_nonce_hashes,json=treeNonceHashes,proto3" json:"tree_nonce_hashes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FundNonceHashes [][]byte               `protobuf:"bytes,2,rep,name=fund_nonce_hashes,json=fundNonceHashes,proto3" json:"fund_nonce_hashes,omitempty"`
}

func (x *CommitToNoncesResponse) Reset() {
	*x = CommitToNoncesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitToNoncesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitToNoncesResponse) ProtoMessage() {}

func (x *CommitToNoncesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitToNoncesResponse.ProtoReflect.Descriptor instead.
func (*CommitToNoncesResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

func (x *CommitToNoncesResponse) GetTreeNonceHashes() map[uint32]*ByteSlices {
	if x != nil {
		return x.TreeNonceHashes
	}
	return nil
}

func (x *CommitToNoncesResponse) GetFundNonceHashes() [][]byte {
	if x != nil {
		return x.FundNonceHashes
	}
	return nil
}

type RevealNoncesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken []byte                 `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	TreeNonces   map[uint32]*ByteSlices `protobuf:"bytes,2,rep,name=tree_nonces,json=treeNonces,proto3" json:"tree_nonces,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FundNonces   [][]byte               `protobuf:"bytes,3,rep,name=fund_nonces,json=fundNonces,proto3" json:"fund_nonces,omitempty"`
}

func (x *RevealNoncesRequest) Reset() {
	*x = RevealNoncesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevealNoncesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevealNoncesRequest) ProtoMessage() {}

func (x *RevealNoncesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevealNoncesRequest.ProtoReflect.Descriptor instead.
func (*RevealNoncesRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

func (x *RevealNoncesRequest) GetSessionToken() []byte {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

func (x *RevealNoncesRequest) GetTreeNonces() map[uint32]*ByteSlices {
	if x != nil {
		return x.TreeNonces
	}
	return nil
}

func (x *RevealNoncesRequest) GetFundNonces() [][]byte {
	if x != nil {
		return x.FundNonces
	}
	return nil
}

type RevealNoncesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeNonces map[uint32]*ByteSlices `protobuf:"bytes,1,rep,name=tree_nonces,json=treeNonces,proto3" json:"tree_nonces,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FundNonces [][]byte               `protobuf:"bytes,2,rep,name=fund_nonces,json=fundNonces,proto3" json:"fund_nonces,omitempty"`
}

func (x *RevealNoncesResponse) Reset() {
	*x = RevealNoncesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevealNoncesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevealNoncesResponse) ProtoMessage() {}

func (x *RevealNoncesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevealNoncesResponse.ProtoReflect.Descriptor instead.
func (*RevealNoncesResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

func (x *RevealNoncesResponse) GetTreeNonces() map[uint32]*ByteSlices {
	if x != nil {
		return x.TreeNonces
	}
	return nil
}

func (x *RevealNoncesResponse) GetFundNonces() [][]byte {
	if x != nil {
		return x.FundNonces
	}
	return nil
}

type SignedTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken   []byte                 `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	TreeSignatures map[uint32]*ByteSlices `protobuf:"bytes,2,rep,name=tree_signatures,json=treeSignatures,proto3" json:"tree_signatures,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FundSignatures [][]byte               `protobuf:"bytes,3,rep,name=fund_signatures,json=fundSignatures,proto3" json:"fund_signatures,omitempty"`
}

func (x *SignedTreeRequest) Reset() {
	*x = SignedTreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedTreeRequest) ProtoMessage() {}

func (x *SignedTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedTreeRequest.ProtoReflect.Descriptor instead.
func (*SignedTreeRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

func (x *SignedTreeRequest) GetSessionToken() []byte {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

func (x *SignedTreeRequest) GetTreeSignatures() map[uint32]*ByteSlices {
	if x != nil {
		return x.TreeSignatures
	}
	return nil
}

func (x *SignedTreeRequest) GetFundSignatures() [][]byte {
	if x != nil {
		return x.FundSignatures
	}
	return nil
}

type SignedTreeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeSignatures   map[uint32][]byte `protobuf:"bytes,1,rep,name=tree_signatures,json=treeSignatures,proto3" json:"tree_signatures,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FundSignaturePub []byte            `protobuf:"bytes,4,opt,name=fund_signature_pub,json=fundSignaturePub,proto3" json:"fund_signature_pub,omitempty"`
}

func (x *SignedTreeResponse) Reset() {
	*x = SignedTreeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedTreeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedTreeResponse) ProtoMessage() {}

func (x *SignedTreeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedTreeResponse.ProtoReflect.Descriptor instead.
func (*SignedTreeResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

func (x *SignedTreeResponse) GetTreeSignatures() map[uint32][]byte {
	if x != nil {
		return x.TreeSignatures
	}
	return nil
}

func (x *SignedTreeResponse) GetFundSignaturePub() []byte {
	if x != nil {
		return x.FundSignaturePub
	}
	return nil
}

type UserErrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId uint32 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ErrorMsg  string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *UserErrorRequest) Reset() {
	*x = UserErrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserErrorRequest) ProtoMessage() {}

func (x *UserErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserErrorRequest.ProtoReflect.Descriptor instead.
func (*UserErrorRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

func (x *UserErrorRequest) GetSessionId() uint32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *UserErrorRequest) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type UserErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserErrorResponse) Reset() {
	*x = UserErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserErrorResponse) ProtoMessage() {}

func (x *UserErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserErrorResponse.ProtoReflect.Descriptor instead.
func (*UserErrorResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12}
}

type RevealLeafKeysResponseInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash     []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Index    uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Tree     uint32 `protobuf:"varint,3,opt,name=tree,proto3" json:"tree,omitempty"`
	Amount   int64  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Sequence uint32 `protobuf:"varint,5,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *RevealLeafKeysResponseInput) Reset() {
	*x = RevealLeafKeysResponseInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevealLeafKeysResponseInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevealLeafKeysResponseInput) ProtoMessage() {}

func (x *RevealLeafKeysResponseInput) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevealLeafKeysResponseInput.ProtoReflect.Descriptor instead.
func (*RevealLeafKeysResponseInput) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3, 0}
}

func (x *RevealLeafKeysResponseInput) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *RevealLeafKeysResponseInput) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RevealLeafKeysResponseInput) GetTree() uint32 {
	if x != nil {
		return x.Tree
	}
	return 0
}

func (x *RevealLeafKeysResponseInput) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RevealLeafKeysResponseInput) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69,
	0x22, 0x84, 0x01, 0x0a, 0x12, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x6b, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x22, 0xdd, 0x02, 0x0a, 0x13, 0x4a, 0x6f, 0x69, 0x6e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x66, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x6b, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x22, 0x74, 0x0a, 0x15, 0x52, 0x65, 0x76, 0x65, 0x61,
	0x6c, 0x4c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x76, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x76, 0x73, 0x22, 0xb6, 0x03,
	0x0a, 0x16, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x4c, 0x65, 0x61,
	0x66, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x57, 0x0a, 0x16, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x4c,
	0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x14, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x76, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x76, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x76, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x76, 0x73, 0x1a, 0x79, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x72,
	0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x20, 0x0a, 0x0a, 0x42, 0x79, 0x74, 0x65, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9a, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x54, 0x6f, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5b, 0x0a, 0x11, 0x74, 0x72, 0x65, 0x65, 0x5f,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54,
	0x6f, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x72, 0x65, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0f, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x1a, 0x53, 0x0a, 0x14, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf7, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x54, 0x6f, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5c, 0x0a, 0x11, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x74,
	0x72, 0x65, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x66, 0x75, 0x6e, 0x64, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x1a, 0x53, 0x0a, 0x14, 0x54, 0x72,
	0x65, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xf6, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x49, 0x0a, 0x0b,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x65, 0x65,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x72, 0x65,
	0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x75,
	0x6e, 0x64, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x4e, 0x0a, 0x0f, 0x54, 0x72, 0x65, 0x65,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd3, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x76,
	0x65, 0x61, 0x6c, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x76,
	0x65, 0x61, 0x6c, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x4e,
	0x0a, 0x0f, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a,
	0x02, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x53, 0x0a, 0x0f, 0x74, 0x72, 0x65,
	0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54,
	0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x74, 0x72, 0x65, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x52, 0x0a, 0x13, 0x54, 0x72, 0x65, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdb, 0x01, 0x0a, 0x12,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x50, 0x75, 0x62, 0x1a, 0x41, 0x0a, 0x13, 0x54, 0x72, 0x65, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x13, 0x0a, 0x11, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa1,
	0x03, 0x0a, 0x07, 0x4d, 0x72, 0x74, 0x74, 0x72, 0x65, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x4a, 0x6f,
	0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e,
	0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x66, 0x4b,
	0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x54, 0x6f, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x54, 0x6f, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x54, 0x72, 0x65, 0x65, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x18, 0x5a, 0x16, 0x64, 0x65, 0x63, 0x72, 0x65, 0x64, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x6d, 0x72, 0x74, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData = file_api_proto_rawDesc
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_rawDescData)
	})
	return file_api_proto_rawDescData
}

var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_api_proto_goTypes = []interface{}{
	(*JoinSessionRequest)(nil),          // 0: api.JoinSessionRequest
	(*JoinSessionResponse)(nil),         // 1: api.JoinSessionResponse
	(*RevealLeafKeysRequest)(nil),       // 2: api.RevealLeafKeysRequest
	(*RevealLeafKeysResponse)(nil),      // 3: api.RevealLeafKeysResponse
	(*ByteSlices)(nil),                  // 4: api.ByteSlices
	(*CommitToNoncesRequest)(nil),       // 5: api.CommitToNoncesRequest
	(*CommitToNoncesResponse)(nil),      // 6: api.CommitToNoncesResponse
	(*RevealNoncesRequest)(nil),         // 7: api.RevealNoncesRequest
	(*RevealNoncesResponse)(nil),        // 8: api.RevealNoncesResponse
	(*SignedTreeRequest)(nil),           // 9: api.SignedTreeRequest
	(*SignedTreeResponse)(nil),          // 10: api.SignedTreeResponse
	(*UserErrorRequest)(nil),            // 11: api.UserErrorRequest
	(*UserErrorResponse)(nil),           // 12: api.UserErrorResponse
	(*RevealLeafKeysResponseInput)(nil), // 13: api.RevealLeafKeysResponse.input
	nil,                                 // 14: api.CommitToNoncesRequest.TreeNonceHashesEntry
	nil,                                 // 15: api.CommitToNoncesResponse.TreeNonceHashesEntry
	nil,                                 // 16: api.RevealNoncesRequest.TreeNoncesEntry
	nil,                                 // 17: api.RevealNoncesResponse.TreeNoncesEntry
	nil,                                 // 18: api.SignedTreeRequest.TreeSignaturesEntry
	nil,                                 // 19: api.SignedTreeResponse.TreeSignaturesEntry
}
var file_api_proto_depIdxs = []int32{
	13, // 0: api.RevealLeafKeysResponse.prefund_inputs:type_name -> api.RevealLeafKeysResponse.input
	13, // 1: api.RevealLeafKeysResponse.fund_additional_inputs:type_name -> api.RevealLeafKeysResponse.input
	14, // 2: api.CommitToNoncesRequest.tree_nonce_hashes:type_name -> api.CommitToNoncesRequest.TreeNonceHashesEntry
	15, // 3: api.CommitToNoncesResponse.tree_nonce_hashes:type_name -> api.CommitToNoncesResponse.TreeNonceHashesEntry
	16, // 4: api.RevealNoncesRequest.tree_nonces:type_name -> api.RevealNoncesRequest.TreeNoncesEntry
	17, // 5: api.RevealNoncesResponse.tree_nonces:type_name -> api.RevealNoncesResponse.TreeNoncesEntry
	18, // 6: api.SignedTreeRequest.tree_signatures:type_name -> api.SignedTreeRequest.TreeSignaturesEntry
	19, // 7: api.SignedTreeResponse.tree_signatures:type_name -> api.SignedTreeResponse.TreeSignaturesEntry
	4,  // 8: api.CommitToNoncesRequest.TreeNonceHashesEntry.value:type_name -> api.ByteSlices
	4,  // 9: api.CommitToNoncesResponse.TreeNonceHashesEntry.value:type_name -> api.ByteSlices
	4,  // 10: api.RevealNoncesRequest.TreeNoncesEntry.value:type_name -> api.ByteSlices
	4,  // 11: api.RevealNoncesResponse.TreeNoncesEntry.value:type_name -> api.ByteSlices
	4,  // 12: api.SignedTreeRequest.TreeSignaturesEntry.value:type_name -> api.ByteSlices
	0,  // 13: api.Mrttree.JoinSession:input_type -> api.JoinSessionRequest
	2,  // 14: api.Mrttree.RevealLeafKeys:input_type -> api.RevealLeafKeysRequest
	5,  // 15: api.Mrttree.CommitToNonces:input_type -> api.CommitToNoncesRequest
	7,  // 16: api.Mrttree.RevealNonces:input_type -> api.RevealNoncesRequest
	9,  // 17: api.Mrttree.SignedTree:input_type -> api.SignedTreeRequest
	11, // 18: api.Mrttree.UserError:input_type -> api.UserErrorRequest
	1,  // 19: api.Mrttree.JoinSession:output_type -> api.JoinSessionResponse
	3,  // 20: api.Mrttree.RevealLeafKeys:output_type -> api.RevealLeafKeysResponse
	6,  // 21: api.Mrttree.CommitToNonces:output_type -> api.CommitToNoncesResponse
	8,  // 22: api.Mrttree.RevealNonces:output_type -> api.RevealNoncesResponse
	10, // 23: api.Mrttree.SignedTree:output_type -> api.SignedTreeResponse
	12, // 24: api.Mrttree.UserError:output_type -> api.UserErrorResponse
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevealLeafKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevealLeafKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByteSlices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitToNoncesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitToNoncesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevealNoncesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevealNoncesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedTreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedTreeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserErrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevealLeafKeysResponseInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MrttreeClient is the client API for Mrttree service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MrttreeClient interface {
	JoinSession(ctx context.Context, in *JoinSessionRequest, opts ...grpc.CallOption) (*JoinSessionResponse, error)
	RevealLeafKeys(ctx context.Context, in *RevealLeafKeysRequest, opts ...grpc.CallOption) (*RevealLeafKeysResponse, error)
	CommitToNonces(ctx context.Context, in *CommitToNoncesRequest, opts ...grpc.CallOption) (*CommitToNoncesResponse, error)
	RevealNonces(ctx context.Context, in *RevealNoncesRequest, opts ...grpc.CallOption) (*RevealNoncesResponse, error)
	SignedTree(ctx context.Context, in *SignedTreeRequest, opts ...grpc.CallOption) (*SignedTreeResponse, error)
	UserError(ctx context.Context, in *UserErrorRequest, opts ...grpc.CallOption) (*UserErrorResponse, error)
}

type mrttreeClient struct {
	cc grpc.ClientConnInterface
}

func NewMrttreeClient(cc grpc.ClientConnInterface) MrttreeClient {
	return &mrttreeClient{cc}
}

func (c *mrttreeClient) JoinSession(ctx context.Context, in *JoinSessionRequest, opts ...grpc.CallOption) (*JoinSessionResponse, error) {
	out := new(JoinSessionResponse)
	err := c.cc.Invoke(ctx, "/api.Mrttree/JoinSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mrttreeClient) RevealLeafKeys(ctx context.Context, in *RevealLeafKeysRequest, opts ...grpc.CallOption) (*RevealLeafKeysResponse, error) {
	out := new(RevealLeafKeysResponse)
	err := c.cc.Invoke(ctx, "/api.Mrttree/RevealLeafKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mrttreeClient) CommitToNonces(ctx context.Context, in *CommitToNoncesRequest, opts ...grpc.CallOption) (*CommitToNoncesResponse, error) {
	out := new(CommitToNoncesResponse)
	err := c.cc.Invoke(ctx, "/api.Mrttree/CommitToNonces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mrttreeClient) RevealNonces(ctx context.Context, in *RevealNoncesRequest, opts ...grpc.CallOption) (*RevealNoncesResponse, error) {
	out := new(RevealNoncesResponse)
	err := c.cc.Invoke(ctx, "/api.Mrttree/RevealNonces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mrttreeClient) SignedTree(ctx context.Context, in *SignedTreeRequest, opts ...grpc.CallOption) (*SignedTreeResponse, error) {
	out := new(SignedTreeResponse)
	err := c.cc.Invoke(ctx, "/api.Mrttree/SignedTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mrttreeClient) UserError(ctx context.Context, in *UserErrorRequest, opts ...grpc.CallOption) (*UserErrorResponse, error) {
	out := new(UserErrorResponse)
	err := c.cc.Invoke(ctx, "/api.Mrttree/UserError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MrttreeServer is the server API for Mrttree service.
type MrttreeServer interface {
	JoinSession(context.Context, *JoinSessionRequest) (*JoinSessionResponse, error)
	RevealLeafKeys(context.Context, *RevealLeafKeysRequest) (*RevealLeafKeysResponse, error)
	CommitToNonces(context.Context, *CommitToNoncesRequest) (*CommitToNoncesResponse, error)
	RevealNonces(context.Context, *RevealNoncesRequest) (*RevealNoncesResponse, error)
	SignedTree(context.Context, *SignedTreeRequest) (*SignedTreeResponse, error)
	UserError(context.Context, *UserErrorRequest) (*UserErrorResponse, error)
}

// UnimplementedMrttreeServer can be embedded to have forward compatible implementations.
type UnimplementedMrttreeServer struct {
}

func (*UnimplementedMrttreeServer) JoinSession(context.Context, *JoinSessionRequest) (*JoinSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinSession not implemented")
}
func (*UnimplementedMrttreeServer) RevealLeafKeys(context.Context, *RevealLeafKeysRequest) (*RevealLeafKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevealLeafKeys not implemented")
}
func (*UnimplementedMrttreeServer) CommitToNonces(context.Context, *CommitToNoncesRequest) (*CommitToNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitToNonces not implemented")
}
func (*UnimplementedMrttreeServer) RevealNonces(context.Context, *RevealNoncesRequest) (*RevealNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevealNonces not implemented")
}
func (*UnimplementedMrttreeServer) SignedTree(context.Context, *SignedTreeRequest) (*SignedTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignedTree not implemented")
}
func (*UnimplementedMrttreeServer) UserError(context.Context, *UserErrorRequest) (*UserErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserError not implemented")
}

func RegisterMrttreeServer(s *grpc.Server, srv MrttreeServer) {
	s.RegisterService(&_Mrttree_serviceDesc, srv)
}

func _Mrttree_JoinSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MrttreeServer).JoinSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mrttree/JoinSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MrttreeServer).JoinSession(ctx, req.(*JoinSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mrttree_RevealLeafKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevealLeafKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MrttreeServer).RevealLeafKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mrttree/RevealLeafKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MrttreeServer).RevealLeafKeys(ctx, req.(*RevealLeafKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mrttree_CommitToNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitToNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MrttreeServer).CommitToNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mrttree/CommitToNonces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MrttreeServer).CommitToNonces(ctx, req.(*CommitToNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mrttree_RevealNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevealNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MrttreeServer).RevealNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mrttree/RevealNonces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MrttreeServer).RevealNonces(ctx, req.(*RevealNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mrttree_SignedTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MrttreeServer).SignedTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mrttree/SignedTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MrttreeServer).SignedTree(ctx, req.(*SignedTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mrttree_UserError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MrttreeServer).UserError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mrttree/UserError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MrttreeServer).UserError(ctx, req.(*UserErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mrttree_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Mrttree",
	HandlerType: (*MrttreeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinSession",
			Handler:    _Mrttree_JoinSession_Handler,
		},
		{
			MethodName: "RevealLeafKeys",
			Handler:    _Mrttree_RevealLeafKeys_Handler,
		},
		{
			MethodName: "CommitToNonces",
			Handler:    _Mrttree_CommitToNonces_Handler,
		},
		{
			MethodName: "RevealNonces",
			Handler:    _Mrttree_RevealNonces_Handler,
		},
		{
			MethodName: "SignedTree",
			Handler:    _Mrttree_SignedTree_Handler,
		},
		{
			MethodName: "UserError",
			Handler:    _Mrttree_UserError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
